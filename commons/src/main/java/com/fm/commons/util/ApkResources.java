package com.fm.commons.util;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.AssetFileDescriptor;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.provider.Settings.Secure;
import android.telephony.TelephonyManager;

import com.fm.commons.http.ContextHolder;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.util.UUID;

public class ApkResources {
	
	private static Logger logger = LoggerFactory.getLogger(ApkResources.class);
	
	// For Device Id
	protected static final String PREFS_FILE = "device_id.xml";
    protected static final String PREFS_DEVICE_ID = "device_id";
    protected volatile static UUID uuid;

	
	
	public static String getString(int id){
		return getString(id, new Object[]{});
	}

	public static String getString(int id, Object... formatArgs){
		try {
			return getResources().getString(id,  formatArgs);
		} catch (Exception e) {
			logger.error("get resource String error "+id, e);
			return "*";
		}
	}

	@SuppressWarnings("deprecation")
	public static Drawable getDrawable(int id){
		Drawable drawable = getResources().getDrawable(id);
		if(drawable instanceof BitmapDrawable){
			BitmapDrawable bitmapDrawable = (BitmapDrawable)drawable;
			bitmapDrawable.setTargetDensity(240);
		}
		return drawable;
	}
	
	public static Bitmap getBitmap(int id){
		BitmapFactory.Options options = new BitmapFactory.Options();
		options.inTargetDensity = 240;
		return getBitmap(id, options);
	}

	public static Bitmap getBitmap(int id, BitmapFactory.Options options){
		return BitmapFactory.decodeResource(getResources(), id, options);
	}

	public static InputStream getInputStream(String path){
		InputStream input = null;
		try {
			input = getResources().getAssets().open(path);
		} catch (IOException e) {
			//logger.debug("can not find resource form apk assets : "+path);
		}
		return input;
	}
	
	public static AssetFileDescriptor getAssetFD(String fileName){
		try {
			return getResources().getAssets().openFd(fileName);
		} catch (IOException e) {
			//throw new RuntimeException(e);
			return null;
		}
	}
	
	public static int getVersionCode() {
		try {
			Context cxt = ContextHolder.get();
			PackageManager packageManager = cxt.getPackageManager();
			PackageInfo packInfo = packageManager.getPackageInfo(cxt.getPackageName(), 0);		
			return packInfo.versionCode;
		} catch (Exception e) {
			return 1;
		}
	}

	public static String getVersionName() {
		try {
			Context cxt = ContextHolder.get();
			PackageManager packageManager = cxt.getPackageManager();
			PackageInfo packInfo = null;
			packInfo = packageManager.getPackageInfo(cxt.getPackageName(), 0);
			return packInfo.versionName;
		} catch (PackageManager.NameNotFoundException e) {
			e.printStackTrace();
		}
		return "";
	}
	
	/**
     * Returns a unique UUID for the current android device. As with all UUIDs,
     * this unique ID is "very highly likely" to be unique across all Android
     * devices. Much more so than ANDROID_ID is.
     * 
     * The UUID is generated by using ANDROID_ID as the base key if appropriate,
     * falling back on TelephonyManager.getDeviceID() if ANDROID_ID is known to
     * be incorrect, and finally falling back on a random UUID that's persisted
     * to SharedPreferences if getDeviceID() does not return a usable value.
     * 
     * In some rare circumstances, this ID may change. In particular, if the
     * device is factory reset a new device ID may be generated. In addition, if
     * a user upgrades their phone from certain buggy implementations of Android
     * 2.2 to a newer, non-buggy version of Android, the device ID may change.
     * Or, if a user uninstalls your app on a device that has neither a proper
     * Android ID nor a Device ID, this ID may change on reinstallation.
     * 
     * Note that if the code falls back on using TelephonyManager.getDeviceId(),
     * the resulting ID will NOT change after a factory reset. Something to be
     * aware of.
     * 
     * Works around a bug in Android 2.2 for many devices when using ANDROID_ID
     * directly.
     * 
     * @see http://code.google.com/p/android/issues/detail?id=10603
     * 
     * @return a UUID that may be used to uniquely identify your device for most
     *         purposes.
     */
    public static String getDeviceUuid() {
        if (uuid == null) 
        	generateUUID(ContextHolder.get());
    	return uuid.toString().replace("-", "");
    }
	
	
	public static void generateUUID(Context context) {
		if (uuid == null) {
            synchronized (ApkResources.class) {
                if (uuid == null) {
                    final SharedPreferences prefs = context
                            .getSharedPreferences(PREFS_FILE, 0);
                    final String id = prefs.getString(PREFS_DEVICE_ID, null);
                    if (id != null) {
                        // Use the ids previously computed and stored in the
                        // prefs file
                        uuid = UUID.fromString(id);
                    } else {
                        final String androidId = Secure.getString(
                            context.getContentResolver(), Secure.ANDROID_ID);
                        // Use the Android ID unless it's broken, in which case
                        // fallback on deviceId,
                        // unless it's not available, then fallback on a random
                        // number which we store to a prefs file
                        try {
                            if (!"9774d56d682e549c".equals(androidId)) {
                                uuid = UUID.nameUUIDFromBytes(androidId
                                        .getBytes("utf8"));
                            } else {
                                final String deviceId = (
                                    (TelephonyManager) context
                                    .getSystemService(Context.TELEPHONY_SERVICE))
                                    .getDeviceId();
                                uuid = deviceId != null ? UUID
                                    .nameUUIDFromBytes(deviceId
                                            .getBytes("utf8")) : UUID
                                    .randomUUID();
                            }
                        } catch (UnsupportedEncodingException e) {
                            throw new RuntimeException(e);
                        }
                        // Write the value out to the prefs file
                        prefs.edit()
                                .putString(PREFS_DEVICE_ID, uuid.toString())
                                .commit();
                    }
                }
            }
        }
	}
	
	private static Resources getResources() {
		Resources res = ContextHolder.get().getResources();
		return res;
	}
}
